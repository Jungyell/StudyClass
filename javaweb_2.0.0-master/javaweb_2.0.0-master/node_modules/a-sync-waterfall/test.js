"use strict"; // 엄격 모드 활성화

const waterfall = require('./index'); // waterfall 모듈 불러오기

// 동기적인 작업을 생성하는 함수
var generateSyncTask = function(index) {
	return function (x){
		return function(cb){
			console.log(x);
			cb(null);
		};
	}(index);
};

// 비동기적인 작업을 생성하는 함수
var generateAsyncTask = function(index) {
	return function (x){
		return function(cb){
			setTimeout(function(){
				console.log(x);
				cb(null);
			}, 0);
		};
	}(index);
};

// 동기적인 작업들을 생성하는 함수
var generateSyncTasks = function(count){
	var tasks = [];
	for(var i=0; i<count; i++) {
		tasks.push(generateSyncTask(i));
	}
	return tasks;
}

// 비동기적인 작업들을 생성하는 함수
var generateAsyncTasks = function(count){
	var tasks = [];
	for(var i=0; i<count; i++) {
		tasks.push(generateAsyncTask(i));
	}
	return tasks;
}

// 랜덤한 비율로 동기 또는 비동기 작업들을 생성하는 함수
var generateRandomTasks = function(count){
	var tasks = [];
	for(var i=0; i<count; i++) {
		Math.random() > .5 ? tasks.push(generateAsyncTask(i)) : tasks.push(generateSyncTask(i))
	}
	return tasks;
}

// 모든 작업이 완료된 후에 실행될 콜백 함수
var done = function(){
	console.log('done');
}

// 동기 작업 테스트 함수
var testSync = function(){
	waterfall(generateSyncTasks(10), done); // waterfall 함수로 동기 작업들 실행
	console.log('this text should be after waterfall');
};

// 비동기 작업 테스트 함수
var testAsync = function(){
	waterfall(generateAsyncTasks(5), done); // waterfall 함수로 비동기 작업들 실행
	console.log('this text should be before waterfall');
};

// 랜덤한 작업 테스트 함수
var testMixed = function(){
	waterfall(generateRandomTasks(20), done); // waterfall 함수로 랜덤 작업들 실행
};

console.log('testSync:');
testSync(); // 동기 작업 테스트 실행

// console.log('\ntestAsync: ');
// testAsync(); // 비동기 작업 테스트 실행

console.log('\ntestMixed: ');
testMixed(); // 랜덤 작업 테스트 실행
