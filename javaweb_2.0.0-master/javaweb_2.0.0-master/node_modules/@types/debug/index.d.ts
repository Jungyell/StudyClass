// Type definitions for debug 4.1
// Project: https://github.com/visionmedia/debug
// Definitions by: Seon-Wook Park <https://github.com/swook>
//                 Gal Talmor <https://github.com/galtalmor>
//                 John McLaughlin <https://github.com/zamb3zi>
//                 Brasten Sager <https://github.com/brasten>
//                 Nicolas Penin <https://github.com/npenin>
//                 Kristian Brünn <https://github.com/kristianmitk>
//                 Caleb Gregory <https://github.com/calebgregory>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

declare var debug: debug.Debug & { debug: debug.Debug; default: debug.Debug };
// debug 변수를 선언하여 debug.Debug 타입을 사용하고, debug, debug.default를 추가로 선언

export = debug;
// 모듈을 내보내기

export as namespace debug;
// 네임스페이스로 내보내기

declare namespace debug {
    // debug 네임스페이스 정의

    interface Debug {
        // Debug 인터페이스 정의
        (namespace: string): Debugger;
        // namespace를 입력으로 받아 Debugger를 반환하는 함수

        coerce: (val: any) => any;
        // val을 입력으로 받아 any 타입으로 반환하는 coerce 함수

        disable: () => string;
        // 문자열을 반환하는 disable 함수

        enable: (namespaces: string) => void;
        // namespaces를 입력으로 받아 void를 반환하는 enable 함수

        enabled: (namespaces: string) => boolean;
        // namespaces를 입력으로 받아 boolean을 반환하는 enabled 함수

        formatArgs: (this: Debugger, args: any[]) => void;
        // args 배열을 입력으로 받아 void를 반환하는 formatArgs 함수

        log: (...args: any[]) => any;
        // 임의의 수의 인수를 입력으로 받아 any를 반환하는 log 함수

        selectColor: (namespace: string) => string | number;
        // namespace를 입력으로 받아 문자열 또는 숫자를 반환하는 selectColor 함수

        humanize: typeof import('ms');
        // 'ms' 모듈 타입을 humanize에 할당

        names: RegExp[];
        // 정규 표현식 배열

        skips: RegExp[];
        // 정규 표현식 배열

        formatters: Formatters;
        // Formatters 인터페이스

        inspectOpts?: {
            hideDate?: boolean | number | null;
            colors?: boolean | number | null;
            depth?: boolean | number | null;
            showHidden?: boolean | number | null;
        };
        // inspectOpts 객체 옵션
    }

    type IDebug = Debug;
    // Debug의 타입 별칭

    interface Formatters {
        // Formatters 인터페이스 정의
        [formatter: string]: (v: any) => string;
        // 함수 이름을 키로 갖고, (v: any) => string 형식의 함수를 값으로 갖는 객체
    }

    type IDebugger = Debugger;
    // Debugger의 타입 별칭

    interface Debugger {
        // Debugger 인터페이스 정의
        (formatter: any, ...args: any[]): void;
        // 임의의 수의 인수를 입력으로 받아 void를 반환하는 함수

        color: string;
        // 문자열 color 속성

        diff: number;
        // 숫자 diff 속성

        enabled: boolean;
        // 부울 enabled 속성

        log: (...args: any[]) => any;
        // 임의의 수의 인수를 입력으로 받아 any를 반환하는 log 함수

        namespace: string;
        // 문자열 namespace 속성
        destroy: () => boolean;
        // boolean을 반환하는 destroy 메서드

        extend: (namespace: string, delimiter?: string) => Debugger;
        // namespace와 delimiter(선택적)를 입력으로 받아 Debugger를 반환하는 extend 메서드
    }
}

