declare module 'stream/promises' { // 스트림 프로미스 모듈 선언
    import { FinishedOptions, PipelineSource, PipelineTransform, PipelineDestination, PipelinePromise, PipelineOptions } from 'node:stream'; // 노드 스트림에서 사용되는 타입 가져오기
    function finished(stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream, options?: FinishedOptions): Promise<void>; // 스트림의 종료를 대기하는 프로미스 반환
    function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(source: A, destination: B, options?: PipelineOptions): PipelinePromise<B>; // 파이프라인을 생성하여 실행하는 프로미스 반환
    function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, B extends PipelineDestination<T1, any>>(
        source: A,
        transform1: T1,
        destination: B,
        options?: PipelineOptions
    ): PipelinePromise<B>; // 파이프라인에 변환기를 추가하여 실행하는 프로미스 반환
    function pipeline<A extends PipelineSource<any>, T1 extends PipelineTransform<A, any>, T2 extends PipelineTransform<T1, any>, B extends PipelineDestination<T2, any>>(
        source: A,
        transform1: T1,
        transform2: T2,
        destination: B,
        options?: PipelineOptions
    ): PipelinePromise<B>; // 파이프라인에 두 개의 변환기를 추가하여 실행하는 프로미스 반환
    function pipeline<
        A extends PipelineSource<any>,
        T1 extends PipelineTransform<A, any>,
        T2 extends PipelineTransform<T1, any>,
        T3 extends PipelineTransform<T2, any>,
        B extends PipelineDestination<T3, any>
    >(source: A, transform1: T1, transform2: T2, transform3: T3, destination: B, options?: PipelineOptions): PipelinePromise<B>; // 파이프라인에 세 개의 변환기를 추가하여 실행하는 프로미스 반환
    function pipeline<
        A extends PipelineSource<any>,
        T1 extends PipelineTransform<A, any>,
        T2 extends PipelineTransform<T1, any>,
        T3 extends PipelineTransform<T2, any>,
        T4 extends PipelineTransform<T3, any>,
        B extends PipelineDestination<T4, any>
    >(source: A, transform1: T1, transform2: T2, transform3: T3, transform4: T4, destination: B, options?: PipelineOptions): PipelinePromise<B>; // 파이프라인에 네 개의 변환기를 추가하여 실행하는 프로미스 반환
    function pipeline(streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>, options?: PipelineOptions): Promise<void>; // 여러 스트림을 파이프라인으로 연결하여 실행하는 프로미스 반환
    function pipeline(
        stream1: NodeJS.ReadableStream,
        stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,
        ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>
    ): Promise<void>; // 여러 스트림을 파이프라인으로 연결하여 실행하는 프로미스 반환
}
declare module 'node:stream/promises' { // 노드 스트림 프로미스 모듈 선언
    export * from 'stream/promises'; // 스트림 프로미스 모듈 내보내기
}
