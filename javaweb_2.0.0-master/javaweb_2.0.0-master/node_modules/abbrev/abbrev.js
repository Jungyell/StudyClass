// exports와 module.exports에 abbrev 함수를 할당하여 모듈로 내보냄
module.exports = exports = abbrev.abbrev = abbrev

// 배열과 객체에 대한 축약 기능을 추가하는 메서드
abbrev.monkeyPatch = monkeyPatch

// 배열과 객체에 대한 축약 기능을 추가하는 메서드
function monkeyPatch () {
  // Array.prototype에 abbrev 메서드를 정의하여 배열의 각 요소에 대한 축약을 반환
  Object.defineProperty(Array.prototype, 'abbrev', {
    value: function () { return abbrev(this) },
    enumerable: false, configurable: true, writable: true
  })

  // Object.prototype에 abbrev 메서드를 정의하여 객체의 키에 대한 축약을 반환
  Object.defineProperty(Object.prototype, 'abbrev', {
    value: function () { return abbrev(Object.keys(this)) },
    enumerable: false, configurable: true, writable: true
  })
}

// 주어진 목록의 각 요소에 대한 축약을 생성하여 반환하는 함수
function abbrev (list) {
  // 인자로 주어진 값이 배열이 아니면 배열로 변환
  if (arguments.length !== 1 || !Array.isArray(list)) {
    list = Array.prototype.slice.call(arguments, 0)
  }
  // 문자열로 변환하여 비교하기 위해 각 요소를 문자열로 변환
  for (var i = 0, l = list.length, args = [] ; i < l ; i ++) {
    args[i] = typeof list[i] === "string" ? list[i] : String(list[i])
  }

  // 배열을 사전식으로 정렬하여 인접한 요소들이 인접하게 함
  args = args.sort(lexSort)

  // 각 요소에 대한 축약을 생성
  var abbrevs = {}
    , prev = ""
  for (var i = 0, l = args.length ; i < l ; i ++) {
    var current = args[i]
      , next = args[i + 1] || ""
      , nextMatches = true
      , prevMatches = true
    if (current === next) continue
    // 현재 요소와 다음 요소를 비교하여 공통된 부분을 찾음
    for (var j = 0, cl = current.length ; j < cl ; j ++) {
      var curChar = current.charAt(j)
      nextMatches = nextMatches && curChar === next.charAt(j)
      prevMatches = prevMatches && curChar === prev.charAt(j)
      if (!nextMatches && !prevMatches) {
        j ++
        break
      }
    }
    prev = current
    // 다음 요소와의 공통된 부분을 찾아 축약을 생성
    if (j === cl) {
      abbrevs[current] = current
      continue
    }
    for (var a = current.substr(0, j) ; j <= cl ; j ++) {
      abbrevs[a] = current
      a += current.charAt(j)
    }
  }
  return abbrevs
}

// 사전식으로 정렬하기 위한 비교 함수
function lexSort (a, b) {
  return a === b ? 0 : a > b ? 1 : -1
}
